from primer_explorer.config import SHORT_PRODUCTS_CUTOFF

from openpyxl import Workbook
from _collections import OrderedDict
from primer_explorer.stats import NUM_SEQUENCIABLE_PRODUCTS

from openpyxl.styles import colors
from openpyxl.styles import Font, Color
from openpyxl.utils.cell import get_column_letter


def generate_pair_stats(primer_pair, count, short_products_cutoff=SHORT_PRODUCTS_CUTOFF):
    report = []
    report.append("{},{}".format(primer_pair[0].decode(), primer_pair[1].decode()))
    report.append("-" * 20)
    report.append("Total Number of products:\t{}".format(count["total_products"]))

    amplificable_product_count = count['amplificable_products']
    report.append("Pcr products that are amplificable(<1000): {}".format(amplificable_product_count))
    viable_products_count = count["viable_products"]['count']
    viable_products_ratio = float(viable_products_count / amplificable_product_count)

    text = "Number of pcr products in range ({} - {}):\t{}\t{:.1%}"
    text = text.format(count["viable_products"]['min'],
                       count["viable_products"]['max'],
                       viable_products_count, viable_products_ratio)
    report.append(text)

    short_product_counts = count['filtered_by_max_length']['count']
    text = "Number of short products(<{}):\t{}\t{:.1%}"
    text = text.format(count['filtered_by_max_length']['max'],
                       short_product_counts,
                       short_product_counts / amplificable_product_count)
    report.append(text)

    report.append("Number of euchromatic effective products:\t{}".format(count["euchromatin_products"]))
    report.append("Number of effective euchromatic nucleotides:\t{}".format(count["euchromatin_nucleotides"]))
    report.append("Number of heterochromatic effective products:\t{}".format(count["heterochromatin_products"]))
    report.append("Number of effective heterochromatic nucleotides:\t{}".format(count["heterochromatin_nucleotides"]))
    report.append("Number of mixed effective products:\t{}".format(count["mixed_products"]))
    report.append("Number of mixed effective nucleotides:\t{}".format(count["mixed_nucleotides"]))
    report.append("Ratio euchromatin (without mixed):\t{:.1%}".format(count["euchromatin_products"] / (viable_products_count - count["mixed_products"])))
    report.append("Ratio heterochromatin (without mixed):\t{:.1%}".format(count["heterochromatin_products"] / (viable_products_count - count["mixed_products"])))
    if viable_products_ratio <= short_products_cutoff:
        report.append("WARNING: too much products generated by this pair are no effective")
    return report


def write_detailed_report(report_fhand, stats):
    report = []
    for idx, set_stats in stats.items():
        primers = set_stats['primers']
        report.append("PRIMER SET {}".format(str(idx)))
        report.append('Primers: ' + ', '.join([p.decode() for p in primers]))
        report.append("#" * 30)
        for pair in sorted(set_stats['stats'].keys()):
            counts = set_stats['stats'][pair]
            report.extend(generate_pair_stats(pair, counts))
            report.append("-" * 20)

    report_fhand.write("\n".join(report))
    report_fhand.flush()


def write_gff_report(gff_results, output_fhand):
    report = []
    report.append("PRIMER PAIR\tEXONS\tGENES\tNUM_PCR_PRODUCTS")
    for primer_pair, results in gff_results.items():
        report.append("{}\t{}\t{}\t{}".format(primer_pair, results["exon"],
                                              results["gene"],
                                              results["num_pcr_products"]))

    output_fhand.write("\n".join(report).encode())
    output_fhand.flush()
    output_fhand.close()


def write_stats_in_excel(out_fpath, stats):
    workbook = Workbook()
    for set_index, primer_set_stats in stats.items():
        if set_index == 0:
            sheet = workbook.active
        else:
            sheet = workbook.create_sheet(titel='sheet {}'.format(set_index + 1))
        write_set_stats_in_sheet(primer_set_stats, sheet)
        workbook.save(out_fpath)
        break


def write_set_stats_in_sheet(primer_set_stats, sheet):
    stats = primer_set_stats['stats']
    first = list(stats.values())[0]
    min_sequenciable = first[NUM_SEQUENCIABLE_PRODUCTS]['min']
    max_sequenciable = first[NUM_SEQUENCIABLE_PRODUCTS]['max']
    primers = primer_set_stats['primers']
    labels = OrderedDict([(index + 1, primer) for index, primer in enumerate(primers)])
    table_label = 'Number of sequenciable products between {}-{} bp'
    sheet['A1'] = table_label.format(min_sequenciable, max_sequenciable)

    for index, (primer_index, primer) in enumerate(labels.items()):
        col_index = index + 3
#         print(col_index)
#         print(primer_index)
#         print(primer)
        cell = sheet.cell(column=col_index, row=2, value='Primer_{}'.format(primer_index))
        font = Font(color=colors.BLACK, bold=True)
        cell.font = font
        sheet.cell(column=col_index, row=3, value=primer)

        row_index = index + 4
        cell = sheet.cell(column=1, row=row_index, value='Primer_{}'.format(primer_index))
        font = Font(color=colors.BLACK, bold=True)
        cell.font = font
        sheet.cell(column=2, row=row_index, value=primer)

    already_done = []
    used_combinations = []
    for index1, primer1 in labels.items():
        for index2, primer2 in labels.items():
            if index1 == index2:
                continue
            if (index1, index2) in already_done:
                continue
            if (index2, index1) in already_done:
                continue
            already_done.append((index1, index2))
            already_done.append((index2, index1))

            counts = stats.get((primer1, primer2), None)
            if counts is None:
                counts = stats.get((primer2, primer1), None)
                used_combinations.append((primer2, primer1))
            else:
                used_combinations.append((primer1, primer2))
            sequenciable_products = counts[NUM_SEQUENCIABLE_PRODUCTS]['count']

            print(index1, index2, sequenciable_products)
            sheet.cell(row=index1 + 3, column=index2 + 2, value=sequenciable_products)

#         sheet.cell()

    for column_index in range(12):
        sheet.column_dimensions[get_column_letter(column_index + 1)].width = 11
