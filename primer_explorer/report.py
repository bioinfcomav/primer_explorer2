from primer_explorer.config import SHORT_PRODUCTS_CUTOFF


def generate_pair_stats(primer_pair, count, short_products_cutoff=SHORT_PRODUCTS_CUTOFF):
    report = []
    report.append("{},{}".format(primer_pair[0].decode(), primer_pair[1].decode()))
    report.append("-" * 20)
    report.append("Total Number of products:\t{}".format(count["total_products"]))

    amplificable_product_count = count['amplificable_products']
    report.append("Pcr products that are amplificable(<1000): {}".format(amplificable_product_count))
    viable_products_count = count["viable_products"]['count']
    viable_products_ratio = float(viable_products_count / amplificable_product_count)

    text = "Number of pcr products in range ({} - {}):\t{}\t{:.1%}"
    text = text.format(count["viable_products"]['min'],
                       count["viable_products"]['max'],
                       viable_products_count, viable_products_ratio)
    report.append(text)

    short_product_counts = count['filtered_by_max_length']['count']
    text = "Number of short products(<{}):\t{}\t{:.1%}"
    text = text.format(count['filtered_by_max_length']['max'],
                       short_product_counts,
                       short_product_counts / amplificable_product_count)
    report.append(text)

    report.append("Number of euchromatic effective products:\t{}".format(count["euchromatin_products"]))
    report.append("Number of effective euchromatic nucleotides:\t{}".format(count["euchromatin_nucleotides"]))
    report.append("Number of heterochromatic effective products:\t{}".format(count["heterochromatin_products"]))
    report.append("Number of effective heterochromatic nucleotides:\t{}".format(count["heterochromatin_nucleotides"]))
    report.append("Number of mixed effective products:\t{}".format(count["mixed_products"]))
    report.append("Number of mixed effective nucleotides:\t{}".format(count["mixed_nucleotides"]))
    report.append("Ratio euchromatin (without mixed):\t{:.1%}".format(count["euchromatin_products"] / (viable_products_count - count["mixed_products"])))
    report.append("Ratio heterochromatin (without mixed):\t{:.1%}".format(count["heterochromatin_products"] / (viable_products_count - count["mixed_products"])))
    if viable_products_ratio <= short_products_cutoff:
        report.append("WARNING: too much products generated by this pair are no effective")
    return report


def write_detailed_report(report_fhand, stats):
    report = []
    for idx, set_stats in stats.items():
        primers = set_stats['primers']
        report.append("PRIMER SET {}".format(str(idx)))
        report.append('Primers: ' + ', '.join([p.decode() for p in primers]))
        report.append("#" * 30)
        for pair in sorted(set_stats['stats'].keys()):
            counts = set_stats['stats'][pair]
            report.extend(generate_pair_stats(pair, counts))
            report.append("-" * 20)

    report_fhand.write("\n".join(report))
    report_fhand.flush()


def write_gff_report(gff_results, output_fhand):
    report = []
    report.append("PRIMER PAIR\tEXONS\tGENES\tNUM_PCR_PRODUCTS")
    for primer_pair, results in gff_results.items():
        report.append("{}\t{}\t{}\t{}".format(primer_pair, results["exon"],
                                              results["gene"],
                                              results["num_pcr_products"]))

    output_fhand.write("\n".join(report).encode())
    output_fhand.flush()
    output_fhand.close()
